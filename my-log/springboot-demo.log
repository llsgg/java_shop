2024-05-23 01:02:27.975 [ AMQP Connection 127.0.0.1:5672 ] - [ WARN  ] [ com.rabbitmq.client.impl.ForgivingExceptionHandler : 115 ] - An unexpected connection driver error occured (Exception message: Connection reset)
2024-05-23 04:59:01.104 [ AMQP Connection 127.0.0.1:5672 ] - [ WARN  ] [ com.rabbitmq.client.impl.ForgivingExceptionHandler : 115 ] - An unexpected connection driver error occured (Exception message: Connection reset)
2024-05-23 09:30:54.668 [ AMQP Connection 127.0.0.1:5672 ] - [ WARN  ] [ com.rabbitmq.client.impl.ForgivingExceptionHandler : 115 ] - An unexpected connection driver error occured (Exception message: Connection reset)
2024-05-23 12:55:58.675 [ AMQP Connection 127.0.0.1:5672 ] - [ WARN  ] [ com.rabbitmq.client.impl.ForgivingExceptionHandler : 115 ] - An unexpected connection driver error occured (Exception message: Connection reset)
2024-05-23 15:25:17.407 [ AMQP Connection 127.0.0.1:5672 ] - [ WARN  ] [ com.rabbitmq.client.impl.ForgivingExceptionHandler : 115 ] - An unexpected connection driver error occured (Exception message: Connection reset)
2024-05-23 16:10:54.236 [ AMQP Connection 127.0.0.1:5672 ] - [ WARN  ] [ com.rabbitmq.client.impl.ForgivingExceptionHandler : 115 ] - An unexpected connection driver error occured (Exception message: Connection reset)
2024-05-23 17:29:37.264 [ AMQP Connection 127.0.0.1:5672 ] - [ WARN  ] [ com.rabbitmq.client.impl.ForgivingExceptionHandler : 115 ] - An unexpected connection driver error occured (Exception message: Connection reset)
2024-05-23 19:53:25.165 [ SpringApplicationShutdownHook ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 2063 ] - {dataSource-1} closing ...
2024-05-23 19:53:25.177 [ SpringApplicationShutdownHook ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 2136 ] - {dataSource-1} closed
2024-05-23 19:53:46.063 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 55 ] - Starting MySpringApplication using Java 1.8.0_361 on LAPTOP-E89D4MS2 with PID 29376 (D:\java\code\毕设\java_shop\server\target\classes started by ll in D:\java\code\毕设\java_shop)
2024-05-23 19:53:46.066 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 659 ] - No active profile set, falling back to default profiles: default
2024-05-23 19:53:49.381 [ main ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-9100"]
2024-05-23 19:53:49.382 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2024-05-23 19:53:49.382 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.53]
2024-05-23 19:53:49.567 [ main ] - [ INFO  ] [ o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] : 173 ] - Initializing Spring embedded WebApplicationContext
2024-05-23 19:53:49.833 [ main ] - [ INFO  ] [ c.a.d.s.b.a.DruidDataSourceAutoConfigure : 56 ] - Init DruidDataSource
2024-05-23 19:53:50.028 [ main ] - [ ERROR ] [ com.alibaba.druid.pool.DruidDataSource : 1178 ] - testWhileIdle is true, validationQuery not set
2024-05-23 19:53:50.034 [ main ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 975 ] - {dataSource-1} inited
2024-05-23 19:53:50.476 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.metadata.TableInfoHelper : 342 ] - Can not find table primary key in Class: "java.lang.Object".
2024-05-23 19:53:50.477 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.injector.DefaultSqlInjector : 56 ] - class java.lang.Object ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2024-05-23 19:53:52.287 [ Druid-ConnectionPool-Create-778484786 ] - [ ERROR ] [ com.alibaba.druid.pool.DruidDataSource : 2858 ] - create connection Error
java.lang.NoSuchMethodError: org.apache.shardingsphere.infra.util.yaml.constructor.ShardingSphereYamlConstructor$1.setCodePointLimit(I)V
	at org.apache.shardingsphere.infra.util.yaml.constructor.ShardingSphereYamlConstructor$1.<init>(ShardingSphereYamlConstructor.java:45)
	at org.apache.shardingsphere.infra.util.yaml.constructor.ShardingSphereYamlConstructor.<init>(ShardingSphereYamlConstructor.java:42)
	at org.apache.shardingsphere.infra.util.yaml.YamlEngine.unmarshal(YamlEngine.java:70)
	at org.apache.shardingsphere.driver.api.yaml.YamlShardingSphereDataSourceFactory.createDataSource(YamlShardingSphereDataSourceFactory.java:94)
	at org.apache.shardingsphere.driver.jdbc.core.driver.DriverDataSourceCache.createDataSource(DriverDataSourceCache.java:51)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at org.apache.shardingsphere.driver.jdbc.core.driver.DriverDataSourceCache.get(DriverDataSourceCache.java:45)
	at org.apache.shardingsphere.driver.ShardingSphereDriver.connect(ShardingSphereDriver.java:51)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:118)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:232)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:112)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1680)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1755)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2825)
2024-05-23 19:53:52.288 [ Druid-ConnectionPool-Create-778484786 ] - [ INFO  ] [ com.alibaba.druid.pool.DruidAbstractDataSource : 1846 ] - {dataSource-1} failContinuous is true
2024-05-23 19:58:09.414 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 55 ] - Starting MySpringApplication using Java 1.8.0_361 on LAPTOP-E89D4MS2 with PID 20352 (D:\java\code\毕设\java_shop\server\target\classes started by ll in D:\java\code\毕设\java_shop)
2024-05-23 19:58:09.417 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 659 ] - No active profile set, falling back to default profiles: default
2024-05-23 19:58:11.067 [ main ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-9100"]
2024-05-23 19:58:11.068 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2024-05-23 19:58:11.068 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.53]
2024-05-23 19:58:11.218 [ main ] - [ INFO  ] [ o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] : 173 ] - Initializing Spring embedded WebApplicationContext
2024-05-23 19:58:11.367 [ main ] - [ INFO  ] [ c.a.d.s.b.a.DruidDataSourceAutoConfigure : 56 ] - Init DruidDataSource
2024-05-23 19:58:11.508 [ main ] - [ ERROR ] [ com.alibaba.druid.pool.DruidDataSource : 1178 ] - testWhileIdle is true, validationQuery not set
2024-05-23 19:58:11.511 [ main ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 975 ] - {dataSource-1} inited
2024-05-23 19:58:11.847 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.metadata.TableInfoHelper : 342 ] - Can not find table primary key in Class: "java.lang.Object".
2024-05-23 19:58:11.847 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.injector.DefaultSqlInjector : 56 ] - class java.lang.Object ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2024-05-23 19:58:13.087 [ Druid-ConnectionPool-Create-778484786 ] - [ ERROR ] [ com.alibaba.druid.pool.DruidDataSource : 2858 ] - create connection Error
java.lang.NoSuchMethodError: org.apache.shardingsphere.infra.util.yaml.constructor.ShardingSphereYamlConstructor$1.setCodePointLimit(I)V
	at org.apache.shardingsphere.infra.util.yaml.constructor.ShardingSphereYamlConstructor$1.<init>(ShardingSphereYamlConstructor.java:45)
	at org.apache.shardingsphere.infra.util.yaml.constructor.ShardingSphereYamlConstructor.<init>(ShardingSphereYamlConstructor.java:42)
	at org.apache.shardingsphere.infra.util.yaml.YamlEngine.unmarshal(YamlEngine.java:70)
	at org.apache.shardingsphere.driver.api.yaml.YamlShardingSphereDataSourceFactory.createDataSource(YamlShardingSphereDataSourceFactory.java:94)
	at org.apache.shardingsphere.driver.jdbc.core.driver.DriverDataSourceCache.createDataSource(DriverDataSourceCache.java:51)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at org.apache.shardingsphere.driver.jdbc.core.driver.DriverDataSourceCache.get(DriverDataSourceCache.java:45)
	at org.apache.shardingsphere.driver.ShardingSphereDriver.connect(ShardingSphereDriver.java:51)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:118)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:232)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:112)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1680)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1755)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2825)
2024-05-23 19:58:13.088 [ Druid-ConnectionPool-Create-778484786 ] - [ INFO  ] [ com.alibaba.druid.pool.DruidAbstractDataSource : 1846 ] - {dataSource-1} failContinuous is true
2024-05-23 20:13:41.530 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 55 ] - Starting MySpringApplication using Java 1.8.0_361 on LAPTOP-E89D4MS2 with PID 31248 (D:\java\code\毕设\java_shop\server\target\classes started by ll in D:\java\code\毕设\java_shop)
2024-05-23 20:13:41.533 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 659 ] - No active profile set, falling back to default profiles: default
2024-05-23 20:13:44.177 [ main ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-9100"]
2024-05-23 20:13:44.178 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2024-05-23 20:13:44.178 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.53]
2024-05-23 20:13:44.335 [ main ] - [ INFO  ] [ o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] : 173 ] - Initializing Spring embedded WebApplicationContext
2024-05-23 20:13:44.467 [ main ] - [ INFO  ] [ c.a.d.s.b.a.DruidDataSourceAutoConfigure : 56 ] - Init DruidDataSource
2024-05-23 20:13:44.594 [ main ] - [ ERROR ] [ com.alibaba.druid.pool.DruidDataSource : 1178 ] - testWhileIdle is true, validationQuery not set
2024-05-23 20:13:44.597 [ main ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 975 ] - {dataSource-1} inited
2024-05-23 20:13:44.954 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.metadata.TableInfoHelper : 342 ] - Can not find table primary key in Class: "java.lang.Object".
2024-05-23 20:13:44.954 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.injector.DefaultSqlInjector : 56 ] - class java.lang.Object ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2024-05-23 20:13:46.805 [ Druid-ConnectionPool-Create-816918962 ] - [ INFO  ] [ com.zaxxer.hikari.HikariDataSource : 110 ] - HikariPool-1 - Starting...
2024-05-23 20:13:46.991 [ Druid-ConnectionPool-Create-816918962 ] - [ INFO  ] [ com.zaxxer.hikari.HikariDataSource : 123 ] - HikariPool-1 - Start completed.
2024-05-23 20:13:47.245 [ Druid-ConnectionPool-Create-816918962 ] - [ INFO  ] [ com.zaxxer.hikari.HikariDataSource : 110 ] - HikariPool-2 - Starting...
2024-05-23 20:13:47.358 [ Druid-ConnectionPool-Create-816918962 ] - [ INFO  ] [ com.zaxxer.hikari.HikariDataSource : 123 ] - HikariPool-2 - Start completed.
2024-05-23 20:13:49.258 [ main ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g, b_seckill_goods sg
        WHERE g.id=sg.goods_id
2024-05-23 20:13:49.259 [ main ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=131, projections=[ShorthandProjectionSegment(startIndex=19, stopIndex=21, owner=Optional[OwnerSegment(startIndex=19, stopIndex=19, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=36, stopIndex=51, identifier=IdentifierValue(value=seckill_price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=36, stopIndex=37, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=66, stopIndex=79, identifier=IdentifierValue(value=stock_count, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=66, stopIndex=67, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=94, stopIndex=106, identifier=IdentifierValue(value=start_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=94, stopIndex=95, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=121, stopIndex=131, identifier=IdentifierValue(value=end_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=121, stopIndex=122, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=158, stopIndex=186, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=158, stopIndex=164, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[g]), joinType=COMMA, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=169, stopIndex=183, identifier=IdentifierValue(value=b_seckill_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[sg]), condition=null, using=[]), where=Optional[WhereSegment(startIndex=196, stopIndex=217, expr=BinaryOperationExpression(startIndex=202, stopIndex=217, left=ColumnSegment(startIndex=202, stopIndex=205, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=202, stopIndex=202, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=207, stopIndex=217, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=207, stopIndex=208, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=g.id=sg.goods_id))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 20:13:49.260 [ main ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g, b_seckill_goods sg
        WHERE g.id=sg.goods_id
2024-05-23 20:13:50.635 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1220 ] - Using default implementation for ThreadExecutor
2024-05-23 20:13:50.653 [ main ] - [ INFO  ] [ org.quartz.core.SchedulerSignalerImpl : 61 ] - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2024-05-23 20:13:50.653 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 229 ] - Quartz Scheduler v.2.3.2 created.
2024-05-23 20:13:50.654 [ main ] - [ INFO  ] [ org.quartz.simpl.RAMJobStore : 155 ] - RAMJobStore initialized.
2024-05-23 20:13:50.655 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 294 ] - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2024-05-23 20:13:50.655 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1374 ] - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2024-05-23 20:13:50.655 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1378 ] - Quartz scheduler version: 2.3.2
2024-05-23 20:13:50.655 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 2293 ] - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@53b907d9
2024-05-23 20:13:50.796 [ main ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Starting ProtocolHandler ["http-nio-9100"]
2024-05-23 20:13:50.981 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 547 ] - Scheduler quartzScheduler_$_NON_CLUSTERED started.
2024-05-23 20:13:50.999 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 61 ] - Started MySpringApplication in 10.061 seconds (JVM running for 11.28)
2024-05-23 20:14:47.498 [ http-nio-9100-exec-1 ] - [ INFO  ] [ o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] : 173 ] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-05-23 20:14:47.638 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 20:14:47.638 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=131, projections=[ShorthandProjectionSegment(startIndex=19, stopIndex=21, owner=Optional[OwnerSegment(startIndex=19, stopIndex=19, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=36, stopIndex=51, identifier=IdentifierValue(value=seckill_price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=36, stopIndex=37, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=66, stopIndex=79, identifier=IdentifierValue(value=stock_count, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=66, stopIndex=67, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=94, stopIndex=106, identifier=IdentifierValue(value=start_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=94, stopIndex=95, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=121, stopIndex=131, identifier=IdentifierValue(value=end_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=121, stopIndex=122, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=158, stopIndex=225, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=158, stopIndex=164, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[g]), joinType=LEFT, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=186, stopIndex=200, identifier=IdentifierValue(value=b_seckill_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[sg]), condition=BinaryOperationExpression(startIndex=208, stopIndex=225, left=ColumnSegment(startIndex=208, stopIndex=211, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=208, stopIndex=208, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=215, stopIndex=225, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=215, stopIndex=216, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=g.id = sg.goods_id), using=[]), where=Optional[WhereSegment(startIndex=235, stopIndex=257, expr=BinaryOperationExpression(startIndex=253, stopIndex=257, left=LiteralExpressionSegment(startIndex=253, stopIndex=253, literals=1), right=LiteralExpressionSegment(startIndex=257, stopIndex=257, literals=1), operator==, text=1 = 1))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 20:14:47.639 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 20:14:47.659 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.659 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.660 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.556, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/classification/list, OPTIONS, 19]
2024-05-23 20:14:47.759 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT  id,title,create_time  FROM b_classification
2024-05-23 20:14:47.759 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=8, stopIndex=27, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=8, stopIndex=9, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=11, stopIndex=15, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=17, stopIndex=27, identifier=IdentifierValue(value=create_time, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty)], distinctRow=false), from=SimpleTableSegment(tableName=TableNameSegment(startIndex=35, stopIndex=50, identifier=IdentifierValue(value=b_classification, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 20:14:47.759 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT  id,title,create_time  FROM b_classification
2024-05-23 20:14:47.775 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.776 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.776 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.774, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thing/seckillList, GET, 219]
2024-05-23 20:14:47.777 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.778 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.779 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.773, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/classification/list, GET, 68]
2024-05-23 20:14:47.829 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.830 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.829 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.832 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.833 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.824, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/upload/image/9a6c7d68-6856-424d-897c-804bdca2f4a5.jpeg, GET, 18]
2024-05-23 20:14:47.833 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.834 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.835 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.825, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/upload/image/ea71ad95-7da2-41c0-9e49-ea2b96f81e53.jpeg, GET, 19]
2024-05-23 20:14:47.835 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.826, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/upload/image/4a5c51b4-f837-40c5-9925-fdb63d494533.jpeg, GET, 18]
2024-05-23 20:14:47.837 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.838 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.839 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.828, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/upload/image/2baa3f45-61ac-4cf4-a837-48c419621dde.jpeg, GET, 19]
2024-05-23 20:14:47.841 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.841 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.842 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.842 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.842 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.835, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/upload/image/36509a1c-65a9-4e53-b919-4b592c32a04d.jpeg, GET, 28]
2024-05-23 20:14:47.842 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.838, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/upload/image/58cd7cef-c4c6-4dd4-8d25-fc8d3e0af8ad.jpeg, GET, 32]
2024-05-23 20:14:47.862 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.863 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.865 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.865 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.858, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/upload/image/50b04075-6b81-46a9-90da-4d5af215265b.jpeg, GET, 16]
2024-05-23 20:14:47.866 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.868 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.862, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/upload/image/31ab2951-96f8-4d8e-adee-5fd6c46a4e5d.jpeg, GET, 16]
2024-05-23 20:14:47.880 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:14:47.881 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:14:47.882 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:14:47.876, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/upload/image/1fbbae3b-887b-45f3-8ef9-a2904edee5b6.jpeg, GET, 19]
2024-05-23 20:15:23.247 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT  id,username,password,nickname,mobile,email,description,role,token,create_time  FROM b_user 
 
 WHERE (username = ?)
2024-05-23 20:15:23.247 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=121, stopIndex=121, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=8, stopIndex=84, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=8, stopIndex=9, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=11, stopIndex=18, identifier=IdentifierValue(value=username, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=20, stopIndex=27, identifier=IdentifierValue(value=password, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=29, stopIndex=36, identifier=IdentifierValue(value=nickname, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=38, stopIndex=43, identifier=IdentifierValue(value=mobile, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=45, stopIndex=49, identifier=IdentifierValue(value=email, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=51, stopIndex=61, identifier=IdentifierValue(value=description, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=63, stopIndex=66, identifier=IdentifierValue(value=role, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=68, stopIndex=72, identifier=IdentifierValue(value=token, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=74, stopIndex=84, identifier=IdentifierValue(value=create_time, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty)], distinctRow=false), from=SimpleTableSegment(tableName=TableNameSegment(startIndex=92, stopIndex=97, identifier=IdentifierValue(value=b_user, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional[WhereSegment(startIndex=103, stopIndex=122, expr=BinaryOperationExpression(startIndex=110, stopIndex=121, left=ColumnSegment(startIndex=110, stopIndex=117, identifier=IdentifierValue(value=username, quoteCharacter=NONE), owner=Optional.empty), right=ParameterMarkerExpressionSegment(startIndex=121, stopIndex=121, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=username = ?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 20:15:23.248 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT  id,username,password,nickname,mobile,email,description,role,token,create_time  FROM b_user 
 
 WHERE (username = ?) ::: [13012345678]
2024-05-23 20:15:23.268 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_user  ( username,
password,




role,
token,
create_time )  VALUES  ( ?,
?,




?,
?,
? )
2024-05-23 20:15:23.268 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=5, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=84, stopIndex=84, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=87, stopIndex=87, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=94, stopIndex=94, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=97, stopIndex=97, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=100, stopIndex=100, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=17, identifier=IdentifierValue(value=b_user, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=20, stopIndex=71, columns=[ColumnSegment(startIndex=22, stopIndex=29, identifier=IdentifierValue(value=username, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=32, stopIndex=39, identifier=IdentifierValue(value=password, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=46, stopIndex=49, identifier=IdentifierValue(value=role, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=52, stopIndex=56, identifier=IdentifierValue(value=token, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=59, stopIndex=69, identifier=IdentifierValue(value=create_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=82, stopIndex=102, values=[ParameterMarkerExpressionSegment(startIndex=84, stopIndex=84, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=87, stopIndex=87, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=94, stopIndex=94, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=97, stopIndex=97, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=100, stopIndex=100, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:15:23.269 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_user  ( username,
password,




role,
token,
create_time )  VALUES  (?, ?, ?, ?, ?) ::: [13012345678, 651cba8ec21a5031306da0e28b74a164, 1, 521f408a6bcb89ff1eb079ba00d7b62f, 1716466523264]
2024-05-23 20:15:23.284 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 20:15:23.284 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 20:15:23.285 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 20:15:23.282, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/user/userRegister, POST, 130]
2024-05-23 22:02:14.650 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT  id,username,password,nickname,mobile,email,description,role,token,create_time  FROM b_user 
 
 WHERE (username = ? AND password = ? AND role = ?)
2024-05-23 22:02:14.657 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=3, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=121, stopIndex=121, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=138, stopIndex=138, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=151, stopIndex=151, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=8, stopIndex=84, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=8, stopIndex=9, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=11, stopIndex=18, identifier=IdentifierValue(value=username, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=20, stopIndex=27, identifier=IdentifierValue(value=password, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=29, stopIndex=36, identifier=IdentifierValue(value=nickname, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=38, stopIndex=43, identifier=IdentifierValue(value=mobile, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=45, stopIndex=49, identifier=IdentifierValue(value=email, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=51, stopIndex=61, identifier=IdentifierValue(value=description, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=63, stopIndex=66, identifier=IdentifierValue(value=role, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=68, stopIndex=72, identifier=IdentifierValue(value=token, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=74, stopIndex=84, identifier=IdentifierValue(value=create_time, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty)], distinctRow=false), from=SimpleTableSegment(tableName=TableNameSegment(startIndex=92, stopIndex=97, identifier=IdentifierValue(value=b_user, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional[WhereSegment(startIndex=103, stopIndex=152, expr=BinaryOperationExpression(startIndex=110, stopIndex=151, left=BinaryOperationExpression(startIndex=110, stopIndex=138, left=BinaryOperationExpression(startIndex=110, stopIndex=121, left=ColumnSegment(startIndex=110, stopIndex=117, identifier=IdentifierValue(value=username, quoteCharacter=NONE), owner=Optional.empty), right=ParameterMarkerExpressionSegment(startIndex=121, stopIndex=121, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=username = ?), right=BinaryOperationExpression(startIndex=127, stopIndex=138, left=ColumnSegment(startIndex=127, stopIndex=134, identifier=IdentifierValue(value=password, quoteCharacter=NONE), owner=Optional.empty), right=ParameterMarkerExpressionSegment(startIndex=138, stopIndex=138, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=password = ?), operator=AND, text=username = ? AND password = ?), right=BinaryOperationExpression(startIndex=144, stopIndex=151, left=ColumnSegment(startIndex=144, stopIndex=147, identifier=IdentifierValue(value=role, quoteCharacter=NONE), owner=Optional.empty), right=ParameterMarkerExpressionSegment(startIndex=151, stopIndex=151, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=role = ?), operator=AND, text=username = ? AND password = ? AND role = ?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:02:14.660 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT  id,username,password,nickname,mobile,email,description,role,token,create_time  FROM b_user 
 
 WHERE (username = ? AND password = ? AND role = ?) ::: [3, a980d6f052b99e5675e6fff68669ccde, 1]
2024-05-23 22:02:14.700 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:14.701 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:14.702 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:14.696, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/user/userLogin, POST, 140]
2024-05-23 22:02:14.782 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:14.783 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:14.783 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:14.783 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:14.784 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:14.779, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/classification/list, OPTIONS, 0]
2024-05-23 22:02:14.784 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:14.780, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thing/seckillList, OPTIONS, 1]
2024-05-23 22:02:14.813 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT  id,title,create_time  FROM b_classification
2024-05-23 22:02:14.814 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=8, stopIndex=27, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=8, stopIndex=9, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=11, stopIndex=15, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=17, stopIndex=27, identifier=IdentifierValue(value=create_time, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty)], distinctRow=false), from=SimpleTableSegment(tableName=TableNameSegment(startIndex=35, stopIndex=50, identifier=IdentifierValue(value=b_classification, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:02:14.815 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT  id,title,create_time  FROM b_classification
2024-05-23 22:02:14.820 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:02:14.821 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=131, projections=[ShorthandProjectionSegment(startIndex=19, stopIndex=21, owner=Optional[OwnerSegment(startIndex=19, stopIndex=19, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=36, stopIndex=51, identifier=IdentifierValue(value=seckill_price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=36, stopIndex=37, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=66, stopIndex=79, identifier=IdentifierValue(value=stock_count, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=66, stopIndex=67, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=94, stopIndex=106, identifier=IdentifierValue(value=start_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=94, stopIndex=95, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=121, stopIndex=131, identifier=IdentifierValue(value=end_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=121, stopIndex=122, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=158, stopIndex=225, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=158, stopIndex=164, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[g]), joinType=LEFT, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=186, stopIndex=200, identifier=IdentifierValue(value=b_seckill_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[sg]), condition=BinaryOperationExpression(startIndex=208, stopIndex=225, left=ColumnSegment(startIndex=208, stopIndex=211, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=208, stopIndex=208, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=215, stopIndex=225, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=215, stopIndex=216, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=g.id = sg.goods_id), using=[]), where=Optional[WhereSegment(startIndex=235, stopIndex=257, expr=BinaryOperationExpression(startIndex=253, stopIndex=257, left=LiteralExpressionSegment(startIndex=253, stopIndex=253, literals=1), right=LiteralExpressionSegment(startIndex=257, stopIndex=257, literals=1), operator==, text=1 = 1))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:02:14.822 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:02:14.824 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:14.825 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:14.827 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:14.822, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/classification/list, GET, 21]
2024-05-23 22:02:14.866 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:14.866 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:14.867 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:14.864, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thing/seckillList, GET, 49]
2024-05-23 22:02:33.111 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT  id,title,create_time  FROM b_classification
2024-05-23 22:02:33.111 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:02:33.111 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=8, stopIndex=27, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=8, stopIndex=9, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=11, stopIndex=15, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=17, stopIndex=27, identifier=IdentifierValue(value=create_time, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty)], distinctRow=false), from=SimpleTableSegment(tableName=TableNameSegment(startIndex=35, stopIndex=50, identifier=IdentifierValue(value=b_classification, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:02:33.111 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=131, projections=[ShorthandProjectionSegment(startIndex=19, stopIndex=21, owner=Optional[OwnerSegment(startIndex=19, stopIndex=19, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=36, stopIndex=51, identifier=IdentifierValue(value=seckill_price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=36, stopIndex=37, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=66, stopIndex=79, identifier=IdentifierValue(value=stock_count, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=66, stopIndex=67, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=94, stopIndex=106, identifier=IdentifierValue(value=start_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=94, stopIndex=95, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=121, stopIndex=131, identifier=IdentifierValue(value=end_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=121, stopIndex=122, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=158, stopIndex=225, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=158, stopIndex=164, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[g]), joinType=LEFT, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=186, stopIndex=200, identifier=IdentifierValue(value=b_seckill_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[sg]), condition=BinaryOperationExpression(startIndex=208, stopIndex=225, left=ColumnSegment(startIndex=208, stopIndex=211, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=208, stopIndex=208, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=215, stopIndex=225, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=215, stopIndex=216, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=g.id = sg.goods_id), using=[]), where=Optional[WhereSegment(startIndex=235, stopIndex=257, expr=BinaryOperationExpression(startIndex=253, stopIndex=257, left=LiteralExpressionSegment(startIndex=253, stopIndex=253, literals=1), right=LiteralExpressionSegment(startIndex=257, stopIndex=257, literals=1), operator==, text=1 = 1))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:02:33.113 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:02:33.113 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT  id,title,create_time  FROM b_classification
2024-05-23 22:02:33.121 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:33.122 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:33.124 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:33.119, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/classification/list, GET, 9]
2024-05-23 22:02:33.133 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:33.133 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:33.134 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:33.131, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thing/seckillList, GET, 21]
2024-05-23 22:02:49.439 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:02:49.439 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT  id,title,create_time  FROM b_classification
2024-05-23 22:02:49.440 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=131, projections=[ShorthandProjectionSegment(startIndex=19, stopIndex=21, owner=Optional[OwnerSegment(startIndex=19, stopIndex=19, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=36, stopIndex=51, identifier=IdentifierValue(value=seckill_price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=36, stopIndex=37, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=66, stopIndex=79, identifier=IdentifierValue(value=stock_count, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=66, stopIndex=67, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=94, stopIndex=106, identifier=IdentifierValue(value=start_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=94, stopIndex=95, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=121, stopIndex=131, identifier=IdentifierValue(value=end_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=121, stopIndex=122, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=158, stopIndex=225, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=158, stopIndex=164, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[g]), joinType=LEFT, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=186, stopIndex=200, identifier=IdentifierValue(value=b_seckill_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[sg]), condition=BinaryOperationExpression(startIndex=208, stopIndex=225, left=ColumnSegment(startIndex=208, stopIndex=211, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=208, stopIndex=208, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=215, stopIndex=225, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=215, stopIndex=216, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=g.id = sg.goods_id), using=[]), where=Optional[WhereSegment(startIndex=235, stopIndex=257, expr=BinaryOperationExpression(startIndex=253, stopIndex=257, left=LiteralExpressionSegment(startIndex=253, stopIndex=253, literals=1), right=LiteralExpressionSegment(startIndex=257, stopIndex=257, literals=1), operator==, text=1 = 1))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:02:49.440 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=8, stopIndex=27, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=8, stopIndex=9, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=11, stopIndex=15, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=17, stopIndex=27, identifier=IdentifierValue(value=create_time, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty)], distinctRow=false), from=SimpleTableSegment(tableName=TableNameSegment(startIndex=35, stopIndex=50, identifier=IdentifierValue(value=b_classification, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:02:49.440 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT  id,title,create_time  FROM b_classification
2024-05-23 22:02:49.440 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:02:49.448 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:49.448 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:49.449 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:49.446, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/classification/list, GET, 11]
2024-05-23 22:02:49.458 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:49.460 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:49.461 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:49.455, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thing/seckillList, GET, 19]
2024-05-23 22:02:54.026 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT  id,title,create_time  FROM b_classification
2024-05-23 22:02:54.027 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:02:54.027 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=8, stopIndex=27, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=8, stopIndex=9, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=11, stopIndex=15, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=17, stopIndex=27, identifier=IdentifierValue(value=create_time, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty)], distinctRow=false), from=SimpleTableSegment(tableName=TableNameSegment(startIndex=35, stopIndex=50, identifier=IdentifierValue(value=b_classification, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:02:54.028 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT  id,title,create_time  FROM b_classification
2024-05-23 22:02:54.028 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=131, projections=[ShorthandProjectionSegment(startIndex=19, stopIndex=21, owner=Optional[OwnerSegment(startIndex=19, stopIndex=19, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=36, stopIndex=51, identifier=IdentifierValue(value=seckill_price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=36, stopIndex=37, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=66, stopIndex=79, identifier=IdentifierValue(value=stock_count, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=66, stopIndex=67, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=94, stopIndex=106, identifier=IdentifierValue(value=start_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=94, stopIndex=95, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=121, stopIndex=131, identifier=IdentifierValue(value=end_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=121, stopIndex=122, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=158, stopIndex=225, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=158, stopIndex=164, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[g]), joinType=LEFT, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=186, stopIndex=200, identifier=IdentifierValue(value=b_seckill_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[sg]), condition=BinaryOperationExpression(startIndex=208, stopIndex=225, left=ColumnSegment(startIndex=208, stopIndex=211, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=208, stopIndex=208, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=215, stopIndex=225, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=215, stopIndex=216, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=g.id = sg.goods_id), using=[]), where=Optional[WhereSegment(startIndex=235, stopIndex=257, expr=BinaryOperationExpression(startIndex=253, stopIndex=257, left=LiteralExpressionSegment(startIndex=253, stopIndex=253, literals=1), right=LiteralExpressionSegment(startIndex=257, stopIndex=257, literals=1), operator==, text=1 = 1))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:02:54.028 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:02:54.033 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:54.034 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:54.034 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:54.032, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/classification/list, GET, 8]
2024-05-23 22:02:54.047 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:02:54.048 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:02:54.048 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:02:54.046, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thing/seckillList, GET, 21]
2024-05-23 22:11:05.031 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:05.032 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:05.032 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:05.033 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:05.033 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:05.029, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thingCollect/getUserCollectList, OPTIONS, 1]
2024-05-23 22:11:05.034 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:05.031, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/order/userOrderList, OPTIONS, 1]
2024-05-23 22:11:05.202 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: select A.*, B.title, B.cover
        from b_goods_collect  A
        join b_goods  B on (A.good_id=B.id)
        where A.user_id=?
2024-05-23 22:11:05.202 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=129, stopIndex=129, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=7, stopIndex=27, projections=[ShorthandProjectionSegment(startIndex=7, stopIndex=9, owner=Optional[OwnerSegment(startIndex=7, stopIndex=7, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=12, stopIndex=18, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=12, stopIndex=12, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=21, stopIndex=27, identifier=IdentifierValue(value=cover, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=21, stopIndex=21, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=42, stopIndex=103, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=42, stopIndex=56, identifier=IdentifierValue(value=b_goods_collect, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[A]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=74, stopIndex=80, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[B]), condition=BinaryOperationExpression(startIndex=89, stopIndex=102, left=ColumnSegment(startIndex=89, stopIndex=97, identifier=IdentifierValue(value=good_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=89, stopIndex=89, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=99, stopIndex=102, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=99, stopIndex=99, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.good_id=B.id), using=[]), where=Optional[WhereSegment(startIndex=113, stopIndex=129, expr=BinaryOperationExpression(startIndex=119, stopIndex=129, left=ColumnSegment(startIndex=119, stopIndex=127, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=119, stopIndex=119, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ParameterMarkerExpressionSegment(startIndex=129, stopIndex=129, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=A.user_id=?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:05.203 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: select A.*, B.title, B.cover
        from b_goods_collect  A
        join b_goods  B on (A.good_id=B.id)
        where A.user_id=? ::: [11]
2024-05-23 22:11:05.228 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:05.228 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: select A.*, B.username, C.title, C.cover, C.price
        from b_order as A
                 join b_user as B on (A.user_id=B.id)
                 join b_goods as C on (A.good_id=C.id)
        where 2>1
         
            and A.user_id=?
         
         
        order by A.order_time desc;
2024-05-23 22:11:05.228 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:05.229 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:05.225, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thingCollect/getUserCollectList, GET, 179]
2024-05-23 22:11:05.228 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=239, stopIndex=239, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=7, stopIndex=48, projections=[ShorthandProjectionSegment(startIndex=7, stopIndex=9, owner=Optional[OwnerSegment(startIndex=7, stopIndex=7, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=username, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=12, stopIndex=12, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=24, stopIndex=30, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=24, stopIndex=24, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=33, stopIndex=39, identifier=IdentifierValue(value=cover, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=33, stopIndex=33, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=42, stopIndex=48, identifier=IdentifierValue(value=price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=42, stopIndex=42, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=63, stopIndex=183, alias=Optional.empty, left=JoinTableSegment(startIndex=63, stopIndex=128, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=63, stopIndex=69, identifier=IdentifierValue(value=b_order, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[A]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=98, stopIndex=103, identifier=IdentifierValue(value=b_user, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[B]), condition=BinaryOperationExpression(startIndex=114, stopIndex=127, left=ColumnSegment(startIndex=114, stopIndex=122, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=114, stopIndex=114, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=124, stopIndex=127, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=124, stopIndex=124, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.user_id=B.id), using=[]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=152, stopIndex=158, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[C]), condition=BinaryOperationExpression(startIndex=169, stopIndex=182, left=ColumnSegment(startIndex=169, stopIndex=177, identifier=IdentifierValue(value=good_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=169, stopIndex=169, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=179, stopIndex=182, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=179, stopIndex=179, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.good_id=C.id), using=[]), where=Optional[WhereSegment(startIndex=193, stopIndex=239, expr=BinaryOperationExpression(startIndex=199, stopIndex=239, left=BinaryOperationExpression(startIndex=199, stopIndex=201, left=LiteralExpressionSegment(startIndex=199, stopIndex=199, literals=2), right=LiteralExpressionSegment(startIndex=201, stopIndex=201, literals=1), operator=>, text=2>1), right=BinaryOperationExpression(startIndex=229, stopIndex=239, left=ColumnSegment(startIndex=229, stopIndex=237, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=229, stopIndex=229, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ParameterMarkerExpressionSegment(startIndex=239, stopIndex=239, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=A.user_id=?), operator=and, text=2>1
         
            and A.user_id=?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional[OrderBySegment(startIndex=269, stopIndex=294, orderByItems=[ColumnOrderByItemSegment(super=TextOrderByItemSegment(), column=ColumnSegment(startIndex=278, stopIndex=289, identifier=IdentifierValue(value=order_time, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=278, stopIndex=278, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]))])], combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:05.229 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: select A.*, B.username, C.title, C.cover, C.price
        from b_order as A
                 join b_user as B on (A.user_id=B.id)
                 join b_goods as C on (A.good_id=C.id)
        where 2>1
         
            and A.user_id=?
         
         
        order by A.order_time desc; ::: [11]
2024-05-23 22:11:05.247 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:05.248 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:05.248 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:05.246, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/order/userOrderList, GET, 200]
2024-05-23 22:11:08.809 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT  id,title,create_time  FROM b_classification
2024-05-23 22:11:08.809 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:11:08.810 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=8, stopIndex=27, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=8, stopIndex=9, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=11, stopIndex=15, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=17, stopIndex=27, identifier=IdentifierValue(value=create_time, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty)], distinctRow=false), from=SimpleTableSegment(tableName=TableNameSegment(startIndex=35, stopIndex=50, identifier=IdentifierValue(value=b_classification, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional.empty, groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:08.810 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=131, projections=[ShorthandProjectionSegment(startIndex=19, stopIndex=21, owner=Optional[OwnerSegment(startIndex=19, stopIndex=19, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=36, stopIndex=51, identifier=IdentifierValue(value=seckill_price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=36, stopIndex=37, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=66, stopIndex=79, identifier=IdentifierValue(value=stock_count, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=66, stopIndex=67, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=94, stopIndex=106, identifier=IdentifierValue(value=start_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=94, stopIndex=95, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=121, stopIndex=131, identifier=IdentifierValue(value=end_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=121, stopIndex=122, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=158, stopIndex=225, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=158, stopIndex=164, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[g]), joinType=LEFT, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=186, stopIndex=200, identifier=IdentifierValue(value=b_seckill_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[sg]), condition=BinaryOperationExpression(startIndex=208, stopIndex=225, left=ColumnSegment(startIndex=208, stopIndex=211, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=208, stopIndex=208, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=215, stopIndex=225, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=215, stopIndex=216, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=g.id = sg.goods_id), using=[]), where=Optional[WhereSegment(startIndex=235, stopIndex=257, expr=BinaryOperationExpression(startIndex=253, stopIndex=257, left=LiteralExpressionSegment(startIndex=253, stopIndex=253, literals=1), right=LiteralExpressionSegment(startIndex=257, stopIndex=257, literals=1), operator==, text=1 = 1))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:08.810 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT  id,title,create_time  FROM b_classification
2024-05-23 22:11:08.810 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:11:08.815 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:08.815 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:08.816 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:08.814, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/classification/list, GET, 6]
2024-05-23 22:11:08.823 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:08.824 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:08.825 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:08.821, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thing/seckillList, GET, 12]
2024-05-23 22:11:11.357 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:11.358 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:11.358 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:11.355, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thing/detail, OPTIONS, 0]
2024-05-23 22:11:11.387 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g, b_seckill_goods sg
        WHERE g.id=sg.goods_id and g.id=?
2024-05-23 22:11:11.389 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=228, stopIndex=228, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=131, projections=[ShorthandProjectionSegment(startIndex=19, stopIndex=21, owner=Optional[OwnerSegment(startIndex=19, stopIndex=19, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=36, stopIndex=51, identifier=IdentifierValue(value=seckill_price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=36, stopIndex=37, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=66, stopIndex=79, identifier=IdentifierValue(value=stock_count, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=66, stopIndex=67, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=94, stopIndex=106, identifier=IdentifierValue(value=start_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=94, stopIndex=95, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=121, stopIndex=131, identifier=IdentifierValue(value=end_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=121, stopIndex=122, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=158, stopIndex=186, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=158, stopIndex=164, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[g]), joinType=COMMA, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=169, stopIndex=183, identifier=IdentifierValue(value=b_seckill_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[sg]), condition=null, using=[]), where=Optional[WhereSegment(startIndex=196, stopIndex=228, expr=BinaryOperationExpression(startIndex=202, stopIndex=228, left=BinaryOperationExpression(startIndex=202, stopIndex=217, left=ColumnSegment(startIndex=202, stopIndex=205, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=202, stopIndex=202, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=207, stopIndex=217, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=207, stopIndex=208, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=g.id=sg.goods_id), right=BinaryOperationExpression(startIndex=223, stopIndex=228, left=ColumnSegment(startIndex=223, stopIndex=226, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=223, stopIndex=223, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ParameterMarkerExpressionSegment(startIndex=228, stopIndex=228, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=g.id=?), operator=and, text=g.id=sg.goods_id and g.id=?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:11.391 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g, b_seckill_goods sg
        WHERE g.id=sg.goods_id and g.id=? ::: [1]
2024-05-23 22:11:11.419 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:11.419 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:11.419 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:11.417, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thing/detail, GET, 45]
2024-05-23 22:11:11.442 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:11:11.442 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=0, parameterMarkerSegments=[], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=131, projections=[ShorthandProjectionSegment(startIndex=19, stopIndex=21, owner=Optional[OwnerSegment(startIndex=19, stopIndex=19, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=36, stopIndex=51, identifier=IdentifierValue(value=seckill_price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=36, stopIndex=37, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=66, stopIndex=79, identifier=IdentifierValue(value=stock_count, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=66, stopIndex=67, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=94, stopIndex=106, identifier=IdentifierValue(value=start_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=94, stopIndex=95, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=121, stopIndex=131, identifier=IdentifierValue(value=end_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=121, stopIndex=122, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=158, stopIndex=225, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=158, stopIndex=164, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[g]), joinType=LEFT, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=186, stopIndex=200, identifier=IdentifierValue(value=b_seckill_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[sg]), condition=BinaryOperationExpression(startIndex=208, stopIndex=225, left=ColumnSegment(startIndex=208, stopIndex=211, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=208, stopIndex=208, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=215, stopIndex=225, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=215, stopIndex=216, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=g.id = sg.goods_id), using=[]), where=Optional[WhereSegment(startIndex=235, stopIndex=257, expr=BinaryOperationExpression(startIndex=253, stopIndex=257, left=LiteralExpressionSegment(startIndex=253, stopIndex=253, literals=1), right=LiteralExpressionSegment(startIndex=257, stopIndex=257, literals=1), operator==, text=1 = 1))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:11.443 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g
        LEFT JOIN b_seckill_goods sg ON g.id = sg.goods_id
        WHERE
            1 = 1
2024-05-23 22:11:11.454 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:11.455 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:11.456 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:11.452, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thing/seckillList, GET, 12]
2024-05-23 22:11:12.266 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:12.266 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:12.267 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:12.264, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/seckill/captcha, GET, 0]
2024-05-23 22:11:12.278 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:12.278 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:12.279 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:12.275, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/seckill/captcha, GET, 839]
2024-05-23 22:11:14.963 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:14.964 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:14.965 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:14.962, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/seckill/path, OPTIONS, 1]
2024-05-23 22:11:15.038 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:15.039 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:15.040 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:15.036, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/seckill/path, GET, 58]
2024-05-23 22:11:15.055 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:15.056 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:15.057 [ http-nio-9100-exec-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:15.053, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/seckill/6fe18c3041c48357f18343b0d8ea319a/doSeckill, OPTIONS, 0]
2024-05-23 22:11:15.201 [ http-nio-9100-exec-8 ] - [ INFO  ] [ com.gk.study.rabbitmq.MQSender : 28 ] - 发送秒杀信息{"userId":11,"goodsId":1}
2024-05-23 22:11:15.216 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:15.216 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:15.217 [ http-nio-9100-exec-8 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:15.215, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/seckill/6fe18c3041c48357f18343b0d8ea319a/doSeckill, GET, 148]
2024-05-23 22:11:15.227 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:15.227 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:15.227 [ http-nio-9100-exec-5 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:15.226, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/seckill/result, OPTIONS, 1]
2024-05-23 22:11:15.244 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT  id,user_id,order_id,goods_id  FROM b_seckill_order 
 
 WHERE (user_id = ? AND goods_id = ?)
2024-05-23 22:11:15.245 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=2, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=80, stopIndex=80, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=97, stopIndex=97, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=8, stopIndex=35, projections=[ColumnProjectionSegment(column=ColumnSegment(startIndex=8, stopIndex=9, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=11, stopIndex=17, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=19, stopIndex=26, identifier=IdentifierValue(value=order_id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=28, stopIndex=35, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional.empty), alias=Optional.empty)], distinctRow=false), from=SimpleTableSegment(tableName=TableNameSegment(startIndex=43, stopIndex=57, identifier=IdentifierValue(value=b_seckill_order, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), where=Optional[WhereSegment(startIndex=63, stopIndex=98, expr=BinaryOperationExpression(startIndex=70, stopIndex=97, left=BinaryOperationExpression(startIndex=70, stopIndex=80, left=ColumnSegment(startIndex=70, stopIndex=76, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional.empty), right=ParameterMarkerExpressionSegment(startIndex=80, stopIndex=80, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=user_id = ?), right=BinaryOperationExpression(startIndex=86, stopIndex=97, left=ColumnSegment(startIndex=86, stopIndex=93, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional.empty), right=ParameterMarkerExpressionSegment(startIndex=97, stopIndex=97, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=goods_id = ?), operator=AND, text=user_id = ? AND goods_id = ?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:15.245 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT  id,user_id,order_id,goods_id  FROM b_seckill_order 
 
 WHERE (user_id = ? AND goods_id = ?) ::: [11, 1]
2024-05-23 22:11:15.251 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:15.251 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:15.252 [ http-nio-9100-exec-4 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:15.250, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/seckill/result, GET, 17]
2024-05-23 22:11:15.726 [ org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1 ] - [ INFO  ] [ com.gk.study.rabbitmq.MQReceiver : 43 ] - 接受的消息:{"userId":11,"goodsId":1}
2024-05-23 22:11:15.762 [ org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g, b_seckill_goods sg
        WHERE g.id=sg.goods_id and g.id=?
2024-05-23 22:11:15.762 [ org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=228, stopIndex=228, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=19, stopIndex=131, projections=[ShorthandProjectionSegment(startIndex=19, stopIndex=21, owner=Optional[OwnerSegment(startIndex=19, stopIndex=19, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=36, stopIndex=51, identifier=IdentifierValue(value=seckill_price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=36, stopIndex=37, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=66, stopIndex=79, identifier=IdentifierValue(value=stock_count, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=66, stopIndex=67, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=94, stopIndex=106, identifier=IdentifierValue(value=start_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=94, stopIndex=95, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=121, stopIndex=131, identifier=IdentifierValue(value=end_date, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=121, stopIndex=122, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=158, stopIndex=186, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=158, stopIndex=164, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[g]), joinType=COMMA, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=169, stopIndex=183, identifier=IdentifierValue(value=b_seckill_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[sg]), condition=null, using=[]), where=Optional[WhereSegment(startIndex=196, stopIndex=228, expr=BinaryOperationExpression(startIndex=202, stopIndex=228, left=BinaryOperationExpression(startIndex=202, stopIndex=217, left=ColumnSegment(startIndex=202, stopIndex=205, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=202, stopIndex=202, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=207, stopIndex=217, identifier=IdentifierValue(value=goods_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=207, stopIndex=208, identifier=IdentifierValue(value=sg, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=g.id=sg.goods_id), right=BinaryOperationExpression(startIndex=223, stopIndex=228, left=ColumnSegment(startIndex=223, stopIndex=226, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=223, stopIndex=223, identifier=IdentifierValue(value=g, quoteCharacter=NONE), owner=Optional.empty)]), right=ParameterMarkerExpressionSegment(startIndex=228, stopIndex=228, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=g.id=?), operator=and, text=g.id=sg.goods_id and g.id=?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:15.763 [ org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: SELECT
            g.*,
            sg.seckill_price,
            sg.stock_count,
            sg.start_date,
            sg.end_date
        FROM
            b_goods g, b_seckill_goods sg
        WHERE g.id=sg.goods_id and g.id=? ::: [1]
2024-05-23 22:11:16.265 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: select A.*, B.username, C.title, C.cover, C.price
        from b_order as A
                 join b_user as B on (A.user_id=B.id)
                 join b_goods as C on (A.good_id=C.id)
        where 2>1
         
            and A.user_id=?
         
         
        order by A.order_time desc;
2024-05-23 22:11:16.265 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: select A.*, B.title, B.cover
        from b_goods_collect  A
        join b_goods  B on (A.good_id=B.id)
        where A.user_id=?
2024-05-23 22:11:16.266 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=129, stopIndex=129, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=7, stopIndex=27, projections=[ShorthandProjectionSegment(startIndex=7, stopIndex=9, owner=Optional[OwnerSegment(startIndex=7, stopIndex=7, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=12, stopIndex=18, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=12, stopIndex=12, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=21, stopIndex=27, identifier=IdentifierValue(value=cover, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=21, stopIndex=21, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=42, stopIndex=103, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=42, stopIndex=56, identifier=IdentifierValue(value=b_goods_collect, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[A]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=74, stopIndex=80, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[B]), condition=BinaryOperationExpression(startIndex=89, stopIndex=102, left=ColumnSegment(startIndex=89, stopIndex=97, identifier=IdentifierValue(value=good_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=89, stopIndex=89, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=99, stopIndex=102, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=99, stopIndex=99, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.good_id=B.id), using=[]), where=Optional[WhereSegment(startIndex=113, stopIndex=129, expr=BinaryOperationExpression(startIndex=119, stopIndex=129, left=ColumnSegment(startIndex=119, stopIndex=127, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=119, stopIndex=119, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ParameterMarkerExpressionSegment(startIndex=129, stopIndex=129, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=A.user_id=?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:16.266 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=239, stopIndex=239, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=7, stopIndex=48, projections=[ShorthandProjectionSegment(startIndex=7, stopIndex=9, owner=Optional[OwnerSegment(startIndex=7, stopIndex=7, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=username, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=12, stopIndex=12, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=24, stopIndex=30, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=24, stopIndex=24, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=33, stopIndex=39, identifier=IdentifierValue(value=cover, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=33, stopIndex=33, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=42, stopIndex=48, identifier=IdentifierValue(value=price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=42, stopIndex=42, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=63, stopIndex=183, alias=Optional.empty, left=JoinTableSegment(startIndex=63, stopIndex=128, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=63, stopIndex=69, identifier=IdentifierValue(value=b_order, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[A]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=98, stopIndex=103, identifier=IdentifierValue(value=b_user, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[B]), condition=BinaryOperationExpression(startIndex=114, stopIndex=127, left=ColumnSegment(startIndex=114, stopIndex=122, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=114, stopIndex=114, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=124, stopIndex=127, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=124, stopIndex=124, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.user_id=B.id), using=[]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=152, stopIndex=158, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[C]), condition=BinaryOperationExpression(startIndex=169, stopIndex=182, left=ColumnSegment(startIndex=169, stopIndex=177, identifier=IdentifierValue(value=good_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=169, stopIndex=169, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=179, stopIndex=182, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=179, stopIndex=179, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.good_id=C.id), using=[]), where=Optional[WhereSegment(startIndex=193, stopIndex=239, expr=BinaryOperationExpression(startIndex=199, stopIndex=239, left=BinaryOperationExpression(startIndex=199, stopIndex=201, left=LiteralExpressionSegment(startIndex=199, stopIndex=199, literals=2), right=LiteralExpressionSegment(startIndex=201, stopIndex=201, literals=1), operator=>, text=2>1), right=BinaryOperationExpression(startIndex=229, stopIndex=239, left=ColumnSegment(startIndex=229, stopIndex=237, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=229, stopIndex=229, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ParameterMarkerExpressionSegment(startIndex=239, stopIndex=239, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=A.user_id=?), operator=and, text=2>1
         
            and A.user_id=?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional[OrderBySegment(startIndex=269, stopIndex=294, orderByItems=[ColumnOrderByItemSegment(super=TextOrderByItemSegment(), column=ColumnSegment(startIndex=278, stopIndex=289, identifier=IdentifierValue(value=order_time, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=278, stopIndex=278, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]))])], combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:16.267 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: select A.*, B.title, B.cover
        from b_goods_collect  A
        join b_goods  B on (A.good_id=B.id)
        where A.user_id=? ::: [11]
2024-05-23 22:11:16.267 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: select A.*, B.username, C.title, C.cover, C.price
        from b_order as A
                 join b_user as B on (A.user_id=B.id)
                 join b_goods as C on (A.good_id=C.id)
        where 2>1
         
            and A.user_id=?
         
         
        order by A.order_time desc; ::: [11]
2024-05-23 22:11:16.272 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:16.273 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:16.273 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:16.273 [ http-nio-9100-exec-7 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:16.269, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/order/userOrderList, GET, 6]
2024-05-23 22:11:16.273 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:16.274 [ http-nio-9100-exec-10 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:16.270, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thingCollect/getUserCollectList, GET, 7]
2024-05-23 22:11:19.008 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: select A.*, B.title, B.cover
        from b_goods_collect  A
        join b_goods  B on (A.good_id=B.id)
        where A.user_id=?
2024-05-23 22:11:19.008 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: select A.*, B.username, C.title, C.cover, C.price
        from b_order as A
                 join b_user as B on (A.user_id=B.id)
                 join b_goods as C on (A.good_id=C.id)
        where 2>1
         
            and A.user_id=?
         
         
        order by A.order_time desc;
2024-05-23 22:11:19.008 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=129, stopIndex=129, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=7, stopIndex=27, projections=[ShorthandProjectionSegment(startIndex=7, stopIndex=9, owner=Optional[OwnerSegment(startIndex=7, stopIndex=7, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=12, stopIndex=18, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=12, stopIndex=12, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=21, stopIndex=27, identifier=IdentifierValue(value=cover, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=21, stopIndex=21, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=42, stopIndex=103, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=42, stopIndex=56, identifier=IdentifierValue(value=b_goods_collect, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[A]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=74, stopIndex=80, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[B]), condition=BinaryOperationExpression(startIndex=89, stopIndex=102, left=ColumnSegment(startIndex=89, stopIndex=97, identifier=IdentifierValue(value=good_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=89, stopIndex=89, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=99, stopIndex=102, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=99, stopIndex=99, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.good_id=B.id), using=[]), where=Optional[WhereSegment(startIndex=113, stopIndex=129, expr=BinaryOperationExpression(startIndex=119, stopIndex=129, left=ColumnSegment(startIndex=119, stopIndex=127, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=119, stopIndex=119, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ParameterMarkerExpressionSegment(startIndex=129, stopIndex=129, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=A.user_id=?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:19.008 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=239, stopIndex=239, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=7, stopIndex=48, projections=[ShorthandProjectionSegment(startIndex=7, stopIndex=9, owner=Optional[OwnerSegment(startIndex=7, stopIndex=7, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=username, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=12, stopIndex=12, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=24, stopIndex=30, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=24, stopIndex=24, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=33, stopIndex=39, identifier=IdentifierValue(value=cover, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=33, stopIndex=33, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=42, stopIndex=48, identifier=IdentifierValue(value=price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=42, stopIndex=42, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=63, stopIndex=183, alias=Optional.empty, left=JoinTableSegment(startIndex=63, stopIndex=128, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=63, stopIndex=69, identifier=IdentifierValue(value=b_order, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[A]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=98, stopIndex=103, identifier=IdentifierValue(value=b_user, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[B]), condition=BinaryOperationExpression(startIndex=114, stopIndex=127, left=ColumnSegment(startIndex=114, stopIndex=122, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=114, stopIndex=114, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=124, stopIndex=127, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=124, stopIndex=124, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.user_id=B.id), using=[]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=152, stopIndex=158, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[C]), condition=BinaryOperationExpression(startIndex=169, stopIndex=182, left=ColumnSegment(startIndex=169, stopIndex=177, identifier=IdentifierValue(value=good_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=169, stopIndex=169, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=179, stopIndex=182, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=179, stopIndex=179, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.good_id=C.id), using=[]), where=Optional[WhereSegment(startIndex=193, stopIndex=239, expr=BinaryOperationExpression(startIndex=199, stopIndex=239, left=BinaryOperationExpression(startIndex=199, stopIndex=201, left=LiteralExpressionSegment(startIndex=199, stopIndex=199, literals=2), right=LiteralExpressionSegment(startIndex=201, stopIndex=201, literals=1), operator=>, text=2>1), right=BinaryOperationExpression(startIndex=229, stopIndex=239, left=ColumnSegment(startIndex=229, stopIndex=237, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=229, stopIndex=229, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ParameterMarkerExpressionSegment(startIndex=239, stopIndex=239, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=A.user_id=?), operator=and, text=2>1
         
            and A.user_id=?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional[OrderBySegment(startIndex=269, stopIndex=294, orderByItems=[ColumnOrderByItemSegment(super=TextOrderByItemSegment(), column=ColumnSegment(startIndex=278, stopIndex=289, identifier=IdentifierValue(value=order_time, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=278, stopIndex=278, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]))])], combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:19.009 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: select A.*, B.username, C.title, C.cover, C.price
        from b_order as A
                 join b_user as B on (A.user_id=B.id)
                 join b_goods as C on (A.good_id=C.id)
        where 2>1
         
            and A.user_id=?
         
         
        order by A.order_time desc; ::: [11]
2024-05-23 22:11:19.009 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: select A.*, B.title, B.cover
        from b_goods_collect  A
        join b_goods  B on (A.good_id=B.id)
        where A.user_id=? ::: [11]
2024-05-23 22:11:19.016 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:19.016 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:19.016 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:19.017 [ http-nio-9100-exec-2 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:19.013, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/order/userOrderList, GET, 8]
2024-05-23 22:11:19.016 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:19.017 [ http-nio-9100-exec-3 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:19.013, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thingCollect/getUserCollectList, GET, 8]
2024-05-23 22:11:50.443 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: select A.*, B.title, B.cover
        from b_goods_collect  A
        join b_goods  B on (A.good_id=B.id)
        where A.user_id=?
2024-05-23 22:11:50.444 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: select A.*, B.username, C.title, C.cover, C.price
        from b_order as A
                 join b_user as B on (A.user_id=B.id)
                 join b_goods as C on (A.good_id=C.id)
        where 2>1
         
            and A.user_id=?
         
         
        order by A.order_time desc;
2024-05-23 22:11:50.444 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=129, stopIndex=129, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=7, stopIndex=27, projections=[ShorthandProjectionSegment(startIndex=7, stopIndex=9, owner=Optional[OwnerSegment(startIndex=7, stopIndex=7, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=12, stopIndex=18, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=12, stopIndex=12, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=21, stopIndex=27, identifier=IdentifierValue(value=cover, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=21, stopIndex=21, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=42, stopIndex=103, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=42, stopIndex=56, identifier=IdentifierValue(value=b_goods_collect, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[A]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=74, stopIndex=80, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[B]), condition=BinaryOperationExpression(startIndex=89, stopIndex=102, left=ColumnSegment(startIndex=89, stopIndex=97, identifier=IdentifierValue(value=good_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=89, stopIndex=89, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=99, stopIndex=102, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=99, stopIndex=99, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.good_id=B.id), using=[]), where=Optional[WhereSegment(startIndex=113, stopIndex=129, expr=BinaryOperationExpression(startIndex=119, stopIndex=129, left=ColumnSegment(startIndex=119, stopIndex=127, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=119, stopIndex=119, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ParameterMarkerExpressionSegment(startIndex=129, stopIndex=129, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=A.user_id=?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional.empty, combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:50.445 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: select A.*, B.title, B.cover
        from b_goods_collect  A
        join b_goods  B on (A.good_id=B.id)
        where A.user_id=? ::: [11]
2024-05-23 22:11:50.445 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLSelectStatement(super=SelectStatement(super=AbstractSQLStatement(parameterCount=1, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=239, stopIndex=239, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), projections=ProjectionsSegment(startIndex=7, stopIndex=48, projections=[ShorthandProjectionSegment(startIndex=7, stopIndex=9, owner=Optional[OwnerSegment(startIndex=7, stopIndex=7, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)], alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=12, stopIndex=21, identifier=IdentifierValue(value=username, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=12, stopIndex=12, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=24, stopIndex=30, identifier=IdentifierValue(value=title, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=24, stopIndex=24, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=33, stopIndex=39, identifier=IdentifierValue(value=cover, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=33, stopIndex=33, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty), ColumnProjectionSegment(column=ColumnSegment(startIndex=42, stopIndex=48, identifier=IdentifierValue(value=price, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=42, stopIndex=42, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), alias=Optional.empty)], distinctRow=false), from=JoinTableSegment(startIndex=63, stopIndex=183, alias=Optional.empty, left=JoinTableSegment(startIndex=63, stopIndex=128, alias=Optional.empty, left=SimpleTableSegment(tableName=TableNameSegment(startIndex=63, stopIndex=69, identifier=IdentifierValue(value=b_order, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[A]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=98, stopIndex=103, identifier=IdentifierValue(value=b_user, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[B]), condition=BinaryOperationExpression(startIndex=114, stopIndex=127, left=ColumnSegment(startIndex=114, stopIndex=122, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=114, stopIndex=114, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=124, stopIndex=127, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=124, stopIndex=124, identifier=IdentifierValue(value=B, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.user_id=B.id), using=[]), joinType=INNER, right=SimpleTableSegment(tableName=TableNameSegment(startIndex=152, stopIndex=158, identifier=IdentifierValue(value=b_goods, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional[C]), condition=BinaryOperationExpression(startIndex=169, stopIndex=182, left=ColumnSegment(startIndex=169, stopIndex=177, identifier=IdentifierValue(value=good_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=169, stopIndex=169, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ColumnSegment(startIndex=179, stopIndex=182, identifier=IdentifierValue(value=id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=179, stopIndex=179, identifier=IdentifierValue(value=C, quoteCharacter=NONE), owner=Optional.empty)]), operator==, text=A.good_id=C.id), using=[]), where=Optional[WhereSegment(startIndex=193, stopIndex=239, expr=BinaryOperationExpression(startIndex=199, stopIndex=239, left=BinaryOperationExpression(startIndex=199, stopIndex=201, left=LiteralExpressionSegment(startIndex=199, stopIndex=199, literals=2), right=LiteralExpressionSegment(startIndex=201, stopIndex=201, literals=1), operator=>, text=2>1), right=BinaryOperationExpression(startIndex=229, stopIndex=239, left=ColumnSegment(startIndex=229, stopIndex=237, identifier=IdentifierValue(value=user_id, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=229, stopIndex=229, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]), right=ParameterMarkerExpressionSegment(startIndex=239, stopIndex=239, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), operator==, text=A.user_id=?), operator=and, text=2>1
         
            and A.user_id=?))], groupBy=Optional.empty, having=Optional.empty, orderBy=Optional[OrderBySegment(startIndex=269, stopIndex=294, orderByItems=[ColumnOrderByItemSegment(super=TextOrderByItemSegment(), column=ColumnSegment(startIndex=278, stopIndex=289, identifier=IdentifierValue(value=order_time, quoteCharacter=NONE), owner=Optional[OwnerSegment(startIndex=278, stopIndex=278, identifier=IdentifierValue(value=A, quoteCharacter=NONE), owner=Optional.empty)]))])], combines=[]), table=Optional.empty, limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
2024-05-23 22:11:50.445 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: select A.*, B.username, C.title, C.cover, C.price
        from b_order as A
                 join b_user as B on (A.user_id=B.id)
                 join b_goods as C on (A.good_id=C.id)
        where 2>1
         
            and A.user_id=?
         
         
        order by A.order_time desc; ::: [11]
2024-05-23 22:11:50.453 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:50.453 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Logic SQL: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  ( ?,
?,
?,
?,
?,

? )
2024-05-23 22:11:50.453 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:50.453 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - SQLStatement: MySQLInsertStatement(super=InsertStatement(super=AbstractSQLStatement(parameterCount=6, parameterMarkerSegments=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)], commentSegments=[]), table=SimpleTableSegment(tableName=TableNameSegment(startIndex=12, stopIndex=19, identifier=IdentifierValue(value=b_op_log, quoteCharacter=NONE)), owner=Optional.empty, alias=Optional.empty), insertColumns=Optional[InsertColumnsSegment(startIndex=22, stopIndex=79, columns=[ColumnSegment(startIndex=24, stopIndex=28, identifier=IdentifierValue(value=re_ip, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=31, stopIndex=37, identifier=IdentifierValue(value=re_time, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=40, stopIndex=44, identifier=IdentifierValue(value=re_ua, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=47, stopIndex=52, identifier=IdentifierValue(value=re_url, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=55, stopIndex=63, identifier=IdentifierValue(value=re_method, quoteCharacter=NONE), owner=Optional.empty), ColumnSegment(startIndex=67, stopIndex=77, identifier=IdentifierValue(value=access_time, quoteCharacter=NONE), owner=Optional.empty)])], insertSelect=Optional.empty, values=[InsertValuesSegment(startIndex=90, stopIndex=110, values=[ParameterMarkerExpressionSegment(startIndex=92, stopIndex=92, parameterMarkerIndex=0, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=95, stopIndex=95, parameterMarkerIndex=1, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=98, stopIndex=98, parameterMarkerIndex=2, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=101, stopIndex=101, parameterMarkerIndex=3, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=104, stopIndex=104, parameterMarkerIndex=4, parameterMarkerType=QUESTION, alias=Optional.empty), ParameterMarkerExpressionSegment(startIndex=108, stopIndex=108, parameterMarkerIndex=5, parameterMarkerType=QUESTION, alias=Optional.empty)])]), setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
2024-05-23 22:11:50.454 [ http-nio-9100-exec-9 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:50.452, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/thingCollect/getUserCollectList, GET, 12]
2024-05-23 22:11:50.454 [ http-nio-9100-exec-6 ] - [ INFO  ] [ ShardingSphere-SQL : 74 ] - Actual SQL: shop ::: INSERT INTO b_op_log  ( re_ip,
re_time,
re_ua,
re_url,
re_method,

access_time )  VALUES  (?, ?, ?, ?, ?, ?) ::: [127.0.0.1, 2024-05-23 22:11:50.451, Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0, /api/order/userOrderList, GET, 9]
2024-05-23 22:12:51.738 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 585 ] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2024-05-23 22:12:51.882 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 666 ] - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2024-05-23 22:12:51.882 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 585 ] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2024-05-23 22:12:51.883 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 740 ] - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2024-05-23 22:12:52.031 [ SpringApplicationShutdownHook ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 2063 ] - {dataSource-1} closing ...
2024-05-23 22:12:52.035 [ SpringApplicationShutdownHook ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 2136 ] - {dataSource-1} closed
2024-05-23 22:13:13.788 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 55 ] - Starting MySpringApplication using Java 1.8.0_361 on LAPTOP-E89D4MS2 with PID 32944 (D:\java\code\毕设\java_shop\server\target\classes started by ll in D:\java\code\毕设\java_shop)
2024-05-23 22:13:13.791 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 659 ] - No active profile set, falling back to default profiles: default
2024-05-23 22:13:16.187 [ main ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-9100"]
2024-05-23 22:13:16.187 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2024-05-23 22:13:16.188 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.53]
2024-05-23 22:13:17.352 [ main ] - [ INFO  ] [ o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] : 173 ] - Initializing Spring embedded WebApplicationContext
2024-05-23 22:13:17.473 [ main ] - [ INFO  ] [ c.a.d.s.b.a.DruidDataSourceAutoConfigure : 56 ] - Init DruidDataSource
2024-05-23 22:13:17.639 [ main ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 975 ] - {dataSource-1} inited
2024-05-23 22:13:18.045 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.metadata.TableInfoHelper : 342 ] - Can not find table primary key in Class: "java.lang.Object".
2024-05-23 22:13:18.046 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.injector.DefaultSqlInjector : 56 ] - class java.lang.Object ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2024-05-23 22:13:21.144 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1220 ] - Using default implementation for ThreadExecutor
2024-05-23 22:13:21.157 [ main ] - [ INFO  ] [ org.quartz.core.SchedulerSignalerImpl : 61 ] - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2024-05-23 22:13:21.158 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 229 ] - Quartz Scheduler v.2.3.2 created.
2024-05-23 22:13:21.159 [ main ] - [ INFO  ] [ org.quartz.simpl.RAMJobStore : 155 ] - RAMJobStore initialized.
2024-05-23 22:13:21.160 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 294 ] - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2024-05-23 22:13:21.160 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1374 ] - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2024-05-23 22:13:21.160 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1378 ] - Quartz scheduler version: 2.3.2
2024-05-23 22:13:21.160 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 2293 ] - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@7e2c6702
2024-05-23 22:13:21.281 [ main ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Starting ProtocolHandler ["http-nio-9100"]
2024-05-23 22:13:21.423 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 547 ] - Scheduler quartzScheduler_$_NON_CLUSTERED started.
2024-05-23 22:13:21.445 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 61 ] - Started MySpringApplication in 8.297 seconds (JVM running for 24.664)
2024-05-23 22:13:51.325 [ http-nio-9100-exec-1 ] - [ INFO  ] [ o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] : 173 ] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-05-23 22:14:10.947 [ http-nio-9100-exec-2 ] - [ INFO  ] [ com.gk.study.rabbitmq.MQSender : 28 ] - 发送秒杀信息{"userId":11,"goodsId":1}
2024-05-23 22:14:10.980 [ org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1 ] - [ INFO  ] [ com.gk.study.rabbitmq.MQReceiver : 43 ] - 接受的消息:{"userId":11,"goodsId":1}
2024-05-23 22:15:30.637 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 585 ] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2024-05-23 22:15:30.812 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 666 ] - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2024-05-23 22:15:30.813 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 585 ] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2024-05-23 22:15:30.813 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 740 ] - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2024-05-23 22:15:30.971 [ SpringApplicationShutdownHook ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 2063 ] - {dataSource-1} closing ...
2024-05-23 22:15:30.977 [ SpringApplicationShutdownHook ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 2136 ] - {dataSource-1} closed
2024-05-23 22:15:36.147 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 55 ] - Starting MySpringApplication using Java 1.8.0_361 on LAPTOP-E89D4MS2 with PID 30580 (D:\java\code\毕设\java_shop\server\target\classes started by ll in D:\java\code\毕设\java_shop)
2024-05-23 22:15:36.149 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 659 ] - No active profile set, falling back to default profiles: default
2024-05-23 22:15:37.740 [ main ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-9100"]
2024-05-23 22:15:37.741 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2024-05-23 22:15:37.741 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.53]
2024-05-23 22:15:37.880 [ main ] - [ INFO  ] [ o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] : 173 ] - Initializing Spring embedded WebApplicationContext
2024-05-23 22:15:38.008 [ main ] - [ INFO  ] [ c.a.d.s.b.a.DruidDataSourceAutoConfigure : 56 ] - Init DruidDataSource
2024-05-23 22:15:38.137 [ main ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 975 ] - {dataSource-1} inited
2024-05-23 22:15:38.458 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.metadata.TableInfoHelper : 342 ] - Can not find table primary key in Class: "java.lang.Object".
2024-05-23 22:15:38.458 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.injector.DefaultSqlInjector : 56 ] - class java.lang.Object ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2024-05-23 22:15:41.186 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1220 ] - Using default implementation for ThreadExecutor
2024-05-23 22:15:41.198 [ main ] - [ INFO  ] [ org.quartz.core.SchedulerSignalerImpl : 61 ] - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2024-05-23 22:15:41.199 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 229 ] - Quartz Scheduler v.2.3.2 created.
2024-05-23 22:15:41.199 [ main ] - [ INFO  ] [ org.quartz.simpl.RAMJobStore : 155 ] - RAMJobStore initialized.
2024-05-23 22:15:41.200 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 294 ] - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2024-05-23 22:15:41.200 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1374 ] - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2024-05-23 22:15:41.200 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1378 ] - Quartz scheduler version: 2.3.2
2024-05-23 22:15:41.201 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 2293 ] - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@51eb0e84
2024-05-23 22:15:41.320 [ main ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Starting ProtocolHandler ["http-nio-9100"]
2024-05-23 22:15:41.424 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 547 ] - Scheduler quartzScheduler_$_NON_CLUSTERED started.
2024-05-23 22:15:41.449 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 61 ] - Started MySpringApplication in 5.907 seconds (JVM running for 6.976)
2024-05-23 22:15:47.836 [ http-nio-9100-exec-2 ] - [ INFO  ] [ o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] : 173 ] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-05-23 22:15:57.594 [ http-nio-9100-exec-2 ] - [ INFO  ] [ com.gk.study.rabbitmq.MQSender : 28 ] - 发送秒杀信息{"userId":11,"goodsId":1}
2024-05-23 22:15:57.638 [ org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1 ] - [ INFO  ] [ com.gk.study.rabbitmq.MQReceiver : 43 ] - 接受的消息:{"userId":11,"goodsId":1}
2024-05-23 22:44:56.121 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 585 ] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2024-05-23 22:44:56.297 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 666 ] - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2024-05-23 22:44:56.298 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 585 ] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2024-05-23 22:44:56.299 [ SpringApplicationShutdownHook ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 740 ] - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2024-05-23 22:44:56.440 [ SpringApplicationShutdownHook ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 2063 ] - {dataSource-1} closing ...
2024-05-23 22:44:56.451 [ SpringApplicationShutdownHook ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 2136 ] - {dataSource-1} closed
2024-05-23 22:45:07.616 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 55 ] - Starting MySpringApplication using Java 1.8.0_361 on LAPTOP-E89D4MS2 with PID 20260 (D:\java\code\毕设\java_shop\server\target\classes started by ll in D:\java\code\毕设\java_shop)
2024-05-23 22:45:07.621 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 659 ] - No active profile set, falling back to default profiles: default
2024-05-23 22:45:09.410 [ main ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-9100"]
2024-05-23 22:45:09.411 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2024-05-23 22:45:09.411 [ main ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.53]
2024-05-23 22:45:09.569 [ main ] - [ INFO  ] [ o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] : 173 ] - Initializing Spring embedded WebApplicationContext
2024-05-23 22:45:09.695 [ main ] - [ INFO  ] [ c.a.d.s.b.a.DruidDataSourceAutoConfigure : 56 ] - Init DruidDataSource
2024-05-23 22:45:09.839 [ main ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 975 ] - {dataSource-1} inited
2024-05-23 22:45:10.146 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.metadata.TableInfoHelper : 342 ] - Can not find table primary key in Class: "java.lang.Object".
2024-05-23 22:45:10.146 [ main ] - [ WARN  ] [ c.b.mybatisplus.core.injector.DefaultSqlInjector : 56 ] - class java.lang.Object ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2024-05-23 22:45:12.955 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1220 ] - Using default implementation for ThreadExecutor
2024-05-23 22:45:12.969 [ main ] - [ INFO  ] [ org.quartz.core.SchedulerSignalerImpl : 61 ] - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2024-05-23 22:45:12.970 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 229 ] - Quartz Scheduler v.2.3.2 created.
2024-05-23 22:45:12.970 [ main ] - [ INFO  ] [ org.quartz.simpl.RAMJobStore : 155 ] - RAMJobStore initialized.
2024-05-23 22:45:12.971 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 294 ] - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2024-05-23 22:45:12.971 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1374 ] - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2024-05-23 22:45:12.972 [ main ] - [ INFO  ] [ org.quartz.impl.StdSchedulerFactory : 1378 ] - Quartz scheduler version: 2.3.2
2024-05-23 22:45:12.972 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 2293 ] - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@51eb0e84
2024-05-23 22:45:13.090 [ main ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Starting ProtocolHandler ["http-nio-9100"]
2024-05-23 22:45:13.205 [ main ] - [ INFO  ] [ org.quartz.core.QuartzScheduler : 547 ] - Scheduler quartzScheduler_$_NON_CLUSTERED started.
2024-05-23 22:45:13.227 [ main ] - [ INFO  ] [ com.gk.study.MySpringApplication : 61 ] - Started MySpringApplication in 6.239 seconds (JVM running for 7.307)
2024-05-23 22:45:30.217 [ http-nio-9100-exec-1 ] - [ INFO  ] [ o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] : 173 ] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-05-23 22:45:36.000 [ http-nio-9100-exec-3 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:46:21.727 [ http-nio-9100-exec-6 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:46:26.148 [ http-nio-9100-exec-8 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:46:30.846 [ http-nio-9100-exec-10 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:46:35.869 [ http-nio-9100-exec-2 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:46:40.288 [ http-nio-9100-exec-4 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:46:43.508 [ http-nio-9100-exec-6 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:46:47.682 [ http-nio-9100-exec-8 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:46:51.117 [ http-nio-9100-exec-10 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:46:56.320 [ http-nio-9100-exec-2 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:47:11.236 [ http-nio-9100-exec-5 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
2024-05-23 22:47:15.560 [ http-nio-9100-exec-8 ] - [ INFO  ] [ com.gk.study.interceptor.AccessInterceptor : 74 ] - token==>f159053ec4a0e4a0e3c66cfd7c254853
